package com.kpi.routetracker.telegram.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.kpi.routetracker.dto.TelegramParcelDto;
import com.kpi.routetracker.model.parcel.Parcel;
import com.kpi.routetracker.model.route.Route;
import com.kpi.routetracker.model.user.Account;
import com.kpi.routetracker.repo.ParcelRepository;
import com.kpi.routetracker.services.account.AccountService;
import com.kpi.routetracker.services.account.TelegramAccountService;
import com.kpi.routetracker.services.route.RouteService;
import com.kpi.routetracker.telegram.MessageUtils;
import com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationDate;
import com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState;
import com.kpi.routetracker.utils.mapper.TelegramParcelMapper;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static com.kpi.routetracker.telegram.MessageUtils.sendMessage;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_APARTMENT_RECEIVER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_APARTMENT_SENDER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_CITY_RECEIVER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_CITY_SENDER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_COUNTRY_RECEIVER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_COUNTRY_SENDER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_HOUSE_RECEIVER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_HOUSE_SENDER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_PARCEL_COUNT;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_RECEIVER_LAST_NAME;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_RECEIVER_NAME;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_RECEIVER_PHONE;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_STREET_RECEIVER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.ASK_STREET_SENDER;
import static com.kpi.routetracker.telegram.model.parcel.TelegramParcelCreationState.START;

@Slf4j
@Service
@AllArgsConstructor
public class TelegramParcelService {

    final Map<Long, TelegramParcelCreationState> creatingParcelStateMap = new HashMap<>();
    final Map<Long, TelegramParcelCreationDate> creatingParcelDataMap = new HashMap<>();
    final Set<Long> deleteParcelStates = new HashSet<>();
    final Map<Long, Long> selectRouteMap = new HashMap<>();

    final TelegramAccountService telegramAccountService;
    final RouteService routeService;
    final AccountService accountService;
    final ParcelRepository parcelRepository;
    final TelegramAccountManagementService telegramAccountManagementService;

    public void startParcelCreating(long chatId, TelegramLongPollingBot bot) {
        if (telegramAccountService.getByChatId(chatId).isPresent()) {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            SendMessage message = new SendMessage();
            message.setChatId(String.valueOf(chatId));
            message.setText("–û–±–µ—Ä—ñ—Ç—å –º–∞—Ä—à—Ä—É—Ç:");

            // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
            InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä—è–¥—ñ–≤ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
            List<List<InlineKeyboardButton>> keyboardRows = new ArrayList<>();

            for (Route route : routeService.getAll()) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
                inlineKeyboardButton.setText(
                        route.getSourceCountry() + "(" + route.getSourceCity() + ")" + " - " + route.getDestinationCountry() + "(" + route.getDestinationCity() + ")");
                inlineKeyboardButton.setCallbackData(String.valueOf(route.getId()));
                row.add(inlineKeyboardButton);
                keyboardRows.add(row);
            }
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            inlineKeyboardMarkup.setKeyboard(keyboardRows);
            message.setReplyMarkup(inlineKeyboardMarkup);
            creatingParcelStateMap.put(chatId, START);
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try {
                bot.execute(message);
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            sendMessage(chatId, "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", bot);
        }

    }

    public void handleParcelCreation(long chatId, String messageText, TelegramLongPollingBot bot) {
        TelegramParcelCreationState currentState = creatingParcelStateMap.get(chatId);
        TelegramParcelCreationDate parcelCreationDate = creatingParcelDataMap.get(chatId);

        switch (currentState) {
            case START:
                selectRouteMap.put(chatId, Long.valueOf(messageText));
                creatingParcelStateMap.put(chatId, ASK_COUNTRY_SENDER);
                creatingParcelDataMap.put(chatId, new TelegramParcelCreationDate());
                sendMessage(chatId, "üåç –í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞:", bot);
                break;
            case ASK_COUNTRY_SENDER:
                parcelCreationDate.setCountrySender(messageText);
                creatingParcelStateMap.put(chatId, ASK_CITY_SENDER);
                sendMessage(chatId, "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞:", bot);
                break;
            case ASK_CITY_SENDER:
                parcelCreationDate.setCitySender(messageText);
                creatingParcelStateMap.put(chatId, ASK_STREET_SENDER);
                sendMessage(chatId, "üöè –í–≤–µ–¥—ñ—Ç—å –≤—É–ª–∏—Ü—é –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞:", bot);
                break;
            case ASK_STREET_SENDER:
                if (!messageText.equals("_")) {
                    parcelCreationDate.setStreetSender(messageText);
                }
                creatingParcelStateMap.put(chatId, ASK_HOUSE_SENDER);
                sendMessage(chatId, "üè† –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", bot);
                break;
            case ASK_HOUSE_SENDER:
                if (!messageText.equals("_")) {
                    parcelCreationDate.setHouseNumberSender(messageText);
                }
                creatingParcelStateMap.put(chatId, ASK_APARTMENT_SENDER);
                sendMessage(chatId, "üè¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞ (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", bot);
                break;
            case ASK_APARTMENT_SENDER:
                if (!messageText.equals("_")) {
                    parcelCreationDate.setApartmentNumberSender(Integer.valueOf(messageText));
                }
                creatingParcelStateMap.put(chatId, ASK_RECEIVER_PHONE);
                sendMessage(chatId, "üìû –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:", bot);
                break;
            case ASK_RECEIVER_PHONE:
                parcelCreationDate.setReceiverPhone(messageText);
                creatingParcelStateMap.put(chatId, ASK_RECEIVER_NAME);
                sendMessage(chatId, "üë§ –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:", bot);
                break;
            case ASK_RECEIVER_NAME:
                parcelCreationDate.setReceiverName(messageText);
                creatingParcelStateMap.put(chatId, ASK_RECEIVER_LAST_NAME);
                sendMessage(chatId, "üë§ –í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:", bot);
                break;
            case ASK_RECEIVER_LAST_NAME:
                parcelCreationDate.setReceiverLastName(messageText);
                creatingParcelStateMap.put(chatId, ASK_COUNTRY_RECEIVER);
                sendMessage(chatId, "üåç –í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:", bot);
                break;
            case ASK_COUNTRY_RECEIVER:
                parcelCreationDate.setCountryReceiver(messageText);
                creatingParcelStateMap.put(chatId, ASK_CITY_RECEIVER);
                sendMessage(chatId, "üèôÔ∏è –í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:", bot);
                break;
            case ASK_CITY_RECEIVER:
                parcelCreationDate.setCityReceiver(messageText);
                creatingParcelStateMap.put(chatId, ASK_STREET_RECEIVER);
                sendMessage(chatId, "üè¢ –í–≤–µ–¥—ñ—Ç—å –≤—É–ª–∏—Ü—é –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", bot);
                break;
            case ASK_STREET_RECEIVER:
                if (!messageText.equals("_")) {
                    parcelCreationDate.setStreetReceiver(messageText);
                }
                creatingParcelStateMap.put(chatId, ASK_HOUSE_RECEIVER);
                sendMessage(chatId, "üè° –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", bot);
                break;
            case ASK_HOUSE_RECEIVER:
                if (!messageText.equals("_")) {
                    parcelCreationDate.setHouseReceiver(messageText);
                }
                creatingParcelStateMap.put(chatId, ASK_APARTMENT_RECEIVER);
                sendMessage(chatId, "üè† –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–º–æ–∂–Ω–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):", bot);
                break;
            case ASK_APARTMENT_RECEIVER:
                if (!messageText.equals("_")) {
                    parcelCreationDate.setApartmentReceiver(Integer.valueOf(messageText));
                }
                creatingParcelStateMap.put(chatId, ASK_PARCEL_COUNT);
                sendMessage(chatId, "üì¶ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å —É –ø–æ—Å–∏–ª—Ü—ñ:", bot);
                break;
            case ASK_PARCEL_COUNT:
                parcelCreationDate.setParcelCount(Integer.parseInt(messageText));
                completeParcelCreating(chatId, parcelCreationDate, bot);
                sendMessage(chatId, "‚úÖ –ü–æ—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!", bot);
                break;
        }
    }

    private void completeParcelCreating(long chatId, TelegramParcelCreationDate parcelCreationDate, TelegramLongPollingBot bot) {
        //Save the user to the database or perform other registration logic
        var sender = telegramAccountService.getByChatId(chatId).get().getAccount();
        var receiver = createAccount(parcelCreationDate.getReceiverPhone(), parcelCreationDate.getReceiverName(), parcelCreationDate.getReceiverLastName());
        var route = routeService.getById(selectRouteMap.get(chatId));

        var result = createParcel(parcelCreationDate, sender, receiver, route);
        try {
            sendMessage(chatId, prepareFindParcelResponseText(TelegramParcelMapper.mapper.toDto(result)).toString(), bot);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

        // Clear the registration state
        creatingParcelStateMap.remove(chatId);
        creatingParcelDataMap.remove(chatId);
        selectRouteMap.remove(chatId);
    }

    public void startDeletingParcel(long chatId, TelegramLongPollingBot bot) {
        deleteParcelStates.add(chatId);
        sendMessage(chatId, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏:", bot);
    }

    public void continueDeletingParcel(long chatId, String id, TelegramLongPollingBot bot) {
        var telegramAccount = telegramAccountService.getByChatId(chatId);
        if (telegramAccount.isPresent()) {
            deleteParcelStates.remove(chatId);
            var parcel = parcelRepository.findById(Long.valueOf(id));
            if (parcel.isPresent() && parcel.get().getSender().equals(telegramAccount.get().getAccount())) {
                parcelRepository.deleteById(Long.valueOf(id));
                sendMessage(chatId, "–ü–æ—Å–∏–ª–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–Ω–∞", bot);
            } else {
                sendMessage(chatId, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏ —Ü—é –ø–æ—Å–∏–ª–∫—É", bot);
            }
        } else {
            sendMessage(chatId, "–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è", bot);
        }

    }

    public Account createAccount(String phoneNumber, String firstName, String lastName) {
        var account = accountService.getAccountByPhoneNumber(phoneNumber);
        return account.orElseGet(() -> accountService.createWithoutPassword(phoneNumber, firstName, lastName));
    }

    public Parcel createParcel(TelegramParcelCreationDate parcelCreationDate, Account sender, Account receiver, Route route) {
        return parcelRepository.save(parcelCreationDate.toParcel(sender, receiver, route));
    }

    public boolean isParcelDeletingStarted(Long chatId) {
        return deleteParcelStates.contains(chatId);
    }

    public boolean isParcelCreationStarted(Long chatId) {
        return creatingParcelStateMap.containsKey(chatId);
    }

    public void findParcels(long chatId, String phoneNumber, TelegramLongPollingBot bot) throws JsonProcessingException {
        List<TelegramParcelDto> parcels = getParcelsByPhoneNumber(phoneNumber);

        if (parcels.isEmpty()) {
            sendMessage(chatId, "–ü–æ—Å–∏–ª–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É: " + phoneNumber, bot);
        } else {
            for (TelegramParcelDto parcel : parcels) {
                MessageUtils.sendLocation(chatId, 49.213255576831784, 28.44080015833143, bot);
                sendMessage(chatId, prepareFindParcelResponseText(parcel).toString(), bot);
            }
        }
    }

    public void findAllParcels(long chatId, TelegramLongPollingBot bot) throws JsonProcessingException {
        var telegramAccount = telegramAccountManagementService.getTelegramAccount(chatId);
        if (telegramAccount != null) {
            findParcels(chatId, telegramAccount.getAccount().getPhoneNumber(), bot);
        } else {
            sendMessage(chatId, "–í–∞—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–∏—Å—Ç–µ–º—ñ. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫—â–æ –í–∏ —Ü—å–æ–≥–æ —â–µ –Ω–µ –∑—Ä–æ–±–∏–ª–∏", bot);
        }

    }

    private List<TelegramParcelDto> getParcelsByPhoneNumber(String phoneNumber) {
        return TelegramParcelMapper.mapper.toDto(parcelRepository.findAllBySender_PhoneNumber(phoneNumber));
    }

    public StringBuilder prepareFindParcelResponseText(TelegramParcelDto telegramParcelDto) {
        StringBuilder builder = new StringBuilder();

        builder.append("–ü–æ—Å–∏–ª–∫–∞ ‚Ññ: ")
                .append(telegramParcelDto.getId())
                .append("\n");

        builder.append("\n");
        if (telegramParcelDto.getSender() != null) {
            var sender = telegramParcelDto.getSender();
            builder.append("–í—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫ üì¶\n").append(" ‚Ä¢ üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ").append(sender.getPhoneNumber()).append("\n").append(" ‚Ä¢ üë§ –Ü–º‚Äô—è: ")
                    .append(sender.getFirstName())
                    .append("\n").append(" ‚Ä¢ üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: ").append(sender.getLastName()).append("\n");
        }

        builder.append("\n");

        if (telegramParcelDto.getSourceCountry() != null || telegramParcelDto.getSourceCity() != null) {
            builder.append("–ê–¥—Ä–µ—Å–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ üè†\n");
            if (telegramParcelDto.getSourceCountry() != null) {
                builder.append(" ‚Ä¢ üåç –ö—Ä–∞—ó–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ").append(telegramParcelDto.getSourceCountry()).append("\n");
            }
            if (telegramParcelDto.getSourceCity() != null) {
                builder.append(" ‚Ä¢ üèôÔ∏è –ú—ñ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ").append(telegramParcelDto.getSourceCity()).append("\n");
            }
            builder.append("\n");
        }

        var receiver = telegramParcelDto.getReceiver();
        builder.append("–û—Ç—Ä–∏–º—É–≤–∞—á üéÅ\n").append(" ‚Ä¢ üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ").append(receiver.getPhoneNumber()).append("\n").append(" ‚Ä¢ üë§ –Ü–º‚Äô—è: ")
                .append(receiver.getFirstName())
                .append("\n").append(" ‚Ä¢ üë§ –ü—Ä—ñ–∑–≤–∏—â–µ: ").append(receiver.getLastName()).append("\n");

        builder.append("\n");
        builder.append("–ê–¥—Ä–µ—Å–∞ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ üè†\n").append(" ‚Ä¢ üåç –ö—Ä–∞—ó–Ω–∞: ").append(telegramParcelDto.getDestinationCountry()).append("\n").append(" ‚Ä¢ üèôÔ∏è –ú—ñ—Å—Ç–æ: ")
                .append(telegramParcelDto.getDestinationCity()).append("\n");

        if (telegramParcelDto.getDestinationStreet() != null) {
            builder.append(" ‚Ä¢ üè¢ –í—É–ª–∏—Ü—è: ").append(telegramParcelDto.getDestinationStreet()).append("\n");
        }
        if (telegramParcelDto.getDestinationHouseNumber() != null) {
            builder.append(" ‚Ä¢ üè° –ù–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É: ").append(telegramParcelDto.getDestinationHouseNumber()).append("\n");
        }
        if (telegramParcelDto.getDestinationFlatNumber() != null) {
            builder.append(" ‚Ä¢ üè† –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏: ").append(telegramParcelDto.getDestinationFlatNumber()).append("\n");
        }
        if (telegramParcelDto.getDeliveryService() != null) {
            builder.append(" ‚Ä¢ üìß –ü–æ—à—Ç–∞: ").append(telegramParcelDto.getDeliveryService()).append("\n");
        }
        if (telegramParcelDto.getDestinationPostNumber() != null) {
            builder.append(" ‚Ä¢ üè§ –ù–æ–º–µ—Ä –ø–æ—à—Ç–æ–≤–æ–≥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: ").append(telegramParcelDto.getDestinationPostNumber()).append("\n");
        }

        builder.append("\n");
        builder.append("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Å–∏–ª–∫—É üì¶\n").append(" ‚Ä¢ üì¶ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å: ").append(telegramParcelDto.getAmount()).append("\n");

        if (telegramParcelDto.getWeight() != null) {
            builder.append(" ‚Ä¢ ‚öñÔ∏è –í–∞–≥–∞: ").append(telegramParcelDto.getWeight()).append("\n");
        }
        if (telegramParcelDto.getPrice() != null) {
            builder.append(" ‚Ä¢ üí≤ –¶—ñ–Ω–∞: ").append(telegramParcelDto.getPrice()).append("\n");
        }
        return builder;
    }
}
